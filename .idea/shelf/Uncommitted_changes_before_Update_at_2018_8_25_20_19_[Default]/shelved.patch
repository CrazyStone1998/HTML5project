Index: HTML5project/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\nDjango settings for HTML5project project.\n\nGenerated by 'django-admin startproject' using Django 2.0.7.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/2.0/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/2.0/ref/settings/\n\"\"\"\n\nimport os\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'e$3-sqham-+@&rkzlg!jtsqp7+r8$tpp*0x^gluoftk)yju#p$'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = ['39.106.131.88','*']\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'weCheck',\n]\n\nMIDDLEWARE = [\n    'django.middleware.cache.UpdateCacheMiddleware',\t# This must be first on the list\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    # 'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'MiddleWare.auth.authenticationMiddleWare',\n    'django.middleware.cache.FetchFromCacheMiddleware', # This must be last\n]\n\nROOT_URLCONF = 'HTML5project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backe'\n                   ''\n                   'nds.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR,'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'HTML5project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/2.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        # 'ENGINE': 'django.db.backends.sqlite3',\n        # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'wecheck',\n        'USER': 'root',\n        'PASSWORD': 'wecheck',\n        'HOST': 'localhost',\n        'POST': '3306',\n\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n#redis\n\nCACHES = {\n    'default': {\n        'BACKEND': 'django_redis.cache.RedisCache',\n        'LOCATION': 'redis://127.0.0.1:6379',\n        \"OPTIONS\": {\n            'DB':1,\n            'PASSWORD':'',\n            #'PARSER_CLASS': 'redis.connection.HiredisParser',\n            'CONNECTION_POOL_CLASS': 'redis.BlockingConnectionPool',\n            'CONNECTION_POOL_CLASS_KWARGS': {\n                        'max_connections': 50,\n                        'timeout': 20,\n                        },\n            \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n        },\n    },\n}\n\n\nREDIS_TIMEOUT=7*24*60*60\nCUBES_REDIS_TIMEOUT=60*60\nNEVER_REDIS_TIMEOUT=365*24*60*60\n\nSESSION_ENGINE = 'django.contrib.sessions.backends.cache'\nSESSION_REDIS_PREFIX = 'session'\n\n# Internationalization\n# https://docs.djangoproject.com/en/2.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'Asia/Shanghai'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.0/howto/static-files/\n\nICON_URL = 'http://39.106.131.88/'\n\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- HTML5project/settings.py	(revision 0969f5b4f095b46f76652a63daefb116ab33a17a)
+++ HTML5project/settings.py	(date 1534990695906)
@@ -85,7 +85,7 @@
         'ENGINE': 'django.db.backends.mysql',
         'NAME': 'wecheck',
         'USER': 'root',
-        'PASSWORD': 'wecheck',
+        'PASSWORD': 'root',
         'HOST': 'localhost',
         'POST': '3306',
 
Index: weCheck/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#!/usr/bin/python\n# -*- coding: UTF-8 -*-\nfrom django.http import HttpResponse\nfrom django.contrib.auth.hashers import make_password\nfrom django.http import JsonResponse\nfrom HTML5project import settings\nfrom django.db.models import F,Q\nfrom weCheck import models\nfrom common.auth.userSystem import userSystem\nfrom common.decorator.ajax_post_only import ajax_post_only\nimport os\nimport time\nimport datetime\nimport string,random\n\ndef imgRescource(request):\n    '''\n    # 获取用户 大脸照\n    :param request:\n    :return:\n    '''\n    path = settings.STATIC_ROOT+'/weCheck/img/'+request.path\n    with open(path,'rb') as f:\n        img = f.read()\n    return HttpResponse(img, content_type='image/jpg')\n\n@ajax_post_only\ndef login(request):\n    '''\n    登陆函数\n    :param request:\n    :return:\n    '''\n\n    # 获取用户 账户 和 密码\n    username = request.POST.get('username')\n    password = request.POST.get('password')\n    # 获取user对象\n    user = userSystem(request)\n    # user登陆 认证\n    # 判定新用户登陆 顶替旧的用户\n    if user.getUsername() != username:\n        user.delCache()\n        # 清理 session\n        request.session.flush()\n\n    error = user.authentication(username=username,password=password)\n    # error为空 则登陆成功\n    # error不为空 则登陆不成功\n    if not error:\n        return JsonResponse({\n            'status':200,\n            'message':'OK',\n        })\n    else:\n        return JsonResponse({\n                            'status':202,\n                            'message':error\n                                        })\n\n@ajax_post_only\ndef logout(request):\n    '''\n    账号 登出\n    :param request:\n    :return:\n    '''\n    # 清理缓存\n    user = userSystem(request)\n    user.delCache()\n    # 清理 session\n    request.session.flush()\n\n    return JsonResponse({\n        'status': 200,\n        'message':'OK',\n    })\n\n\n@ajax_post_only\ndef register(request):\n    # 错误信息列表\n    error = []\n    # 后台获取并判断用户名和密码 是否为空\n    username = request.POST.get('username')\n    passwd = request.POST.get('password')\n    if username is None or passwd is None:\n        error.append('The username&passwd cannot be empty')\n        # 获取并判断 用户名是否存在\n    elif not models.user.objects.filter(Q(username=username)&Q(isDelete=False)).exists():\n\n        passwd   = make_password(passwd)\n        name     = request.POST.get('name')\n        img      = request.FILES.get('profile')\n        userType = request.POST.get('userType')\n        profile  = settings.ICON_URL+''+username+'.jpg'\n        # 将 用户 大脸照 写入 本地文件中\n        imgPath  = os.path.join(settings.STATIC_ROOT,'weCheck','img',username+'.jpg')\n        # 判断用户 大脸照 是否存在 若存在 重写\n        if os.path.exists(imgPath):\n            os.remove(imgPath)\n        with open(imgPath,'wb+') as f:\n            for chunk in img.chunks():\n                f.write(chunk)\n        # 调用 model类的 新建对象方法 存储用户对象\n        models.user.userObject(username,passwd,name,profile,userType,)\n        # 返回 json\n        return JsonResponse({\n                             'status':200,\n                             'message':'OK'\n                                        })\n    else:\n        error.append('Username already exists')\n    return JsonResponse({\n            'status':202,\n            'message':error,\n        })\n\n\ndef user_splitter(request,GET=None,POST=None):\n    '''\n    获取用户信息 分流器\n    根据 request.method 分配方法\n    GET:view.userGET\n    POST:view.userPOST\n    :param request:\n    :return:\n    '''\n    # 错误信息列表\n    error = []\n    if request.method == 'GET' and GET is not None:\n        return GET(request)\n    elif request.method == 'POST' and POST is not None:\n        return POST(request)\n    else:\n        error.append('request.method is WRONG')\n\n\ndef userGET(request):\n    '''\n    显示用户信息\n    :param request:\n    :return:\n    '''\n    # 错误信息列表\n    error = []\n    assert request.method == 'GET'\n    # 获取用户对象\n    user = models.user.objects.get_or_none(username=userSystem(request).getUsername())\n\n    if user is not None:\n\n        return JsonResponse({\n\n            'status': 200,\n            'message': 'success',\n            'data': {\n                'username': user.username,\n                'profile': user.profile,\n                'name': user.name\n\n            }\n        })\n    else:\n        error.append('user is not exist')\n        return JsonResponse({\n            'status': 202,\n            'message': error\n        })\n\n\ndef userPOST(request):\n    '''\n    修改用户信息\n    :param request:\n    :return:\n    '''\n    # 错误信息列表\n    error = []\n    assert request.method == 'POST'\n\n    user = models.user.objects.get_or_none(username=userSystem(request).getUsername())\n\n    user.name = request.POST.get('name',user.name)\n\n    img = request.FILES.get('profile')\n    if img:\n        # 修改 大脸照\n        user.profile = settings.ICON_URL + '' + user.username + '.jpg'\n        # 将 用户 大脸照 写入 本地文件中\n        imgPath = os.path.join(settings.STATIC_ROOT, 'weCheck', 'img', user.username + '.jpg')\n        # 判断用户 大脸照 是否存在 若存在 重写\n        if os.path.exists(imgPath):\n            os.remove(imgPath)\n        with open(imgPath, 'wb+') as f:\n            for chunk in img.chunks():\n                f.write(chunk)\n    # 保存 修改\n    user.save()\n\n    return JsonResponse({\n        'status':200,\n        'message':'success'\n    })\n\n\n\ndef group(request):\n    error = []\n    id = request.GET.get('id')\n    group = models.group.objects.get_or_none(groupID=id)\n    user = models.user.objects.get_or_none(username=userSystem(request).getUsername())\n\n    if group is not None:\n        groupID = group.groupID\n        name = group.name\n        owner = group.owner.username\n        member = group.member\n        role = 0\n\n        if user.username == owner:\n            role = 2\n            check = models.check.objects.get_or_none(groupID=groupID)\n            if check is not None:\n                state = check.enable\n\n            else:\n                state = False\n            return JsonResponse({'status': 200,\n                                     'message': 'success',\n                                     'data': {\n                                     'id': groupID,\n                                     'name': name,\n                                     'owner': owner,\n                                     'member': member,\n                                     'role': role\n                                 },\n                                 'state':state\n                                 })\n\n\n        elif user.username in group.member:\n            role = 1\n            check = models.check.objects.get_or_none(groupID=groupID)\n            if check is not None:\n                state = check.enable\n                if state == True:\n                    if user.username in check.members:\n                        checked = True\n                    else:\n                        checked =  False\n                    return JsonResponse({'status': 200,\n                                 'message': 'success',\n                                 'data': {\n                                     'id': groupID,\n                                     'name': name,\n                                     'owner': owner,\n                                     'role': role\n                                 },\n                                 'state': state,\n                                 'checked':checked\n                                 })\n\n                elif state ==  False:\n                    return JsonResponse({'status': 200,\n                                 'message': 'success',\n                                 'data': {\n                                     'id': groupID,\n                                     'name': name,\n                                     'owner': owner,\n                                     'role': role\n                                 },\n                                 'state': state\n                                 })\n            else:\n                return JsonResponse({'status': 200,\n                                     'message': 'success',\n                                     'data': {\n                                         'id': groupID,\n                                         'name': name,\n                                         'owner': owner,\n                                         'role': role\n                                     },\n                                     'state': False\n                                     })\n        else:\n            return JsonResponse({'status': 200,\n                                 'message': 'success',\n                                 'data': {\n                                     'id': groupID,\n                                     'name': name,\n                                     'owner': owner,\n                                     'role': role\n                                 },\n                                 })\n    else:\n        error.append('group is not exist')\n        return JsonResponse({\n            'status': 202,\n            'message': error\n        })\n\n\n\ndef grouplist(request):\n    error = []\n    user = models.user.objects.get_or_none(username=userSystem(request).getUsername())\n    data = []\n    group_message = {}\n    if user is not None:\n        if user.userType == 1:\n            groups = models.group.objects.filter(owner=user)\n            if groups.count()!=0:\n                for group in groups:\n                    groupID = group.groupID\n                    name = group.name\n                    owner = group.owner\n                    member = group.member\n                    check = models.check.objects.get_or_none(groupID=groupID)\n                    if check is not None:\n                        state = check.enable\n                        group_message = {'id':groupID,'name':name,'owner':owner.username,'member':member,'state':state,'role':2}\n                        data.append(group_message)\n                    else:\n                        group_message = {'id': groupID, 'name': name, 'owner': owner.username, 'member': member,'state':False,\n                                     'role': 2}\n                        data.append(group_message)\n                return     JsonResponse({'status':200,\n                                 'message':'success',\n                                 'data':data\n                                 })\n            else:\n                return JsonResponse({'status': 200,\n                                     'message': 'success',\n                                     'data': data\n                                     })\n        else :\n            groups = models.group.objects.filter(member__contains=user.username)\n            if groups.count()!=0:\n                for group in groups :\n                    groupID = group.groupID\n                    name = group.name\n                    owner = group.owner\n\n                    check = models.check.objects.get_or_none(groupID=groupID)\n                    if check is not None:\n                        state = check.enable\n                        if state == True:\n                            if user.username in check.members:\n                                checked = True\n                            else:\n                                checked = False\n                            group_message = {'id': groupID, 'name': name, 'owner': owner.username,  'state': state,'role': 1,'checked':checked}\n                            data.append(group_message)\n                        else:\n                            group_message = {'id': groupID, 'name': name, 'owner': owner.username,  'state': state,'role': 1}\n                            data.append(group_message)\n                    else:\n                        group_message = {'id': groupID, 'name': name, 'owner': owner.username, 'state': False,\n                                         'role': 1}\n                        data.append(group_message)\n                return JsonResponse({'status':200,\n                                 'message':'success',\n                                 'data':data\n                                 })\n            else:\n                return JsonResponse({'status': 200,\n                              'message': 'success',\n                              'data': data\n                              })\n\n    else:\n        error.append(\"user not exist \")\n        return JsonResponse({'status':202,\n                             'message':error,\n                             'data':group_message\n                             })\n\n\n\n# 创建group\ndef groupadd(request):\n    error = []\n    user = models.user.objects.get_or_none(username=userSystem(request).getUsername())\n    if user.userType == 1:\n        name = request.POST.get('name')\n        id = ''.join(random.sample(string.ascii_letters+string.digits,6))\n\n        #生成6位的随机口令由大写小写字母和数字随机组成，多达21亿多种结果,基本不能重复\n        newGroup,flag=models.group.objects.get_or_create(groupID=id,name=name,member='',owner=user,isDelete=False)\n        if newGroup is not None:\n            return JsonResponse({'status':200,\n                                 'message':'OK',\n                                 'data':id,\n            })\n        else:\n            error.append('group id repeat,create group fault')\n            return JsonResponse({\n                'status':202,\n                'message':error\n            })\n    else:\n        error.append('user type error,must be monitor')\n        return JsonResponse({\n            'status':403,\n            'message':error\n        })\n\n\n#加入群组\ndef groupjoin(request):\n    error = []\n\n    user = models.user.objects.get_or_none(username = userSystem(request).getUsername())\n    if user.userType == 0:\n        id = request.POST.get('id')\n        group = models.group.objects.get_or_none(groupID=id)\n        if group.member == '':\n            group.member = group.member+user.username\n        else:\n            group.member = group.member +\" \"+user.username\n        group.save()\n\n        return JsonResponse({\n            'status':200,\n            'message':'success'\n        })\n    else:\n        error.append('user type error, must be user ')\n        return JsonResponse({\n            'status':403,\n            'message':error\n        })\n\n\ndef groupquit(request):\n    error = []\n    id = request.POST.get('id')\n    user = models.user.objects.get_or_none(username=userSystem(request).getUsername())\n    group = models.group.objects.get_or_none(groupID=id)\n    group_check = models.check.objects.get_or_none(groupID=id)\n    if user.userType == 0 and group is not None:\n        member = group.member\n        index = member.find(user.username)\n        if index != -1:\n            new_member = member.replace(user.username,' ')\n            if group_check is not None:\n                if group_check.enable == True:\n                    if user.username in group_check.members:\n                        members = group_check.members\n                        if members.find(user.username) != -1:\n                            new_members = members.replace(user.username,'')\n                            group_check.members = new_members\n                            group_check.save()\n            group.member = new_member\n            group.save()\n            return JsonResponse({'status':200,\n                                 'message':'success'\n                                 })\n    else :\n        error.append('user type error you must be user or group id error group not exist')\n        return JsonResponse({'status':202,\n                             'message':error\n                             })\ndef groupupdate(request):\n    error = []\n    id = request.POST.get('id')\n    group = models.group.objects.get_or_none(groupID=id)\n    user = models.user.objects.get_or_none(username = userSystem(request).getUsername())\n    if group is not None:\n        if user.userType == 1 and group.owner.username == user.username:\n            owner_name = request.POST.get('owner')\n            if owner_name is not None:\n                owner = models.user.objects.get(username=owner_name)\n                if owner is not None:\n                    if owner.userType == 1:\n                        group.owner = owner\n            member = request.POST.get('member',group.member)\n            name = request.POST.get('name',group.name)\n            group.member = member\n            group.name = name\n            group.save()\n            return JsonResponse({'status':200,\n                             'message':'success'\n                             })\n        else:\n            error.append('user type error,must be group monitor')\n            return JsonResponse({'status':403,\n                                 'message':error\n                                 })\n    else:\n        error.append('group not exist ')\n        return JsonResponse({'status':202,\n                             'message':error})\ndef groupdelete(request):\n    error = []\n    id = request.POST.get('id')\n    group = models.group.objects.get_or_none(groupID=id)\n    user = models.user.objects.get_or_none(username = userSystem(request).getUsername())\n    if group is not None:\n        if user.userType == 1 and group.owner == user:\n            group.delete()\n            return JsonResponse({'status':200,\n                                 'message':'success'})\n        else:\n            error.append('user type error ,must be group monitor')\n            return JsonResponse({\n                'status':403,\n                'message':error\n            })\n    else:\n        error.append('group not exist')\n        return JsonResponse({\n            'status':202,\n            'message':error\n        })\n\n\ndef checkstatus(request):\n    user = models.user.objects.get_or_none(username= userSystem(request).getUsername())\n    if user is not None:\n        username=user.username\n        nowdate=datetime.date.today()\n        doneList=models.check.objects.filter(members__contains=username).filter(startDate__exact=nowdate).filter(results__contains=username)\n        doneList_request=[]\n        for done in doneList:\n            s ={\n                \"groupId\":str(done.groupID.groupID),\n                \"startUpTime\":str(done.startUpTime),\n            }\n            doneList_request.append(s)\n\n        missedList= models.check.objects.filter(members__contains=username).filter(startDate__exact=nowdate).filter(enable__exact=False).filter(~Q(results__contains=username))\n        missedList_request=[]\n        for miss in missedList:\n\n            s1={\n                \"groupId\": str(miss.groupID.groupID),\n                \"startUpTime\": str(miss.startUpTime),\n            }\n            missedList_request.append(s1)\n\n        openList=models.check.objects.filter(members__contains=username).filter(enable__exact=True)\n        openList_request=[]\n        for open in openList:\n            s={\n                \"groupId\": str(open.groupID.groupID),\n                \"startUpTime\": str(open.startUpTime),\n            }\n            openList_request.append(s)\n        weekdate=str(nowdate.weekday()+1)\n        belong_group=models.group.objects.filter(member__contains=username)#用户所属小组\n        nowtime = str(time.strftime('%H:%M', time.localtime(time.time())))#将现在的时间格式化为hh:mm\n        s1 = \"20160916\" + nowtime + \":00\"#为了能与startuptime相比较 两者必须放到同一天 再转化为日期类型\n        t1 = time.strptime(s1, '%Y%m%d%H:%M:%S')\n        time1 = time.mktime(t1)\n\n        futureList=models.checkPlan.objects.filter(groupID__in=belong_group).filter(enable__exact=True).filter(repeat__contains=weekdate)\n\n        #以上future并没有一时间为条件过滤，因为时间是字符串类型，在上述语句中不好操作\n        futureList_request=[]\n        for future in futureList:\n            #将startup time转化为日期类型方便比较\n            check_time=future.startUpTime\n            s2 = \"20160916\" + check_time + \":00\"\n            t2 = time.strptime(s2, '%Y%m%d%H:%M:%S')\n            time2 = time.mktime(t2)\n            if(time2>time1):\n                s={\n                    \"groupId\": str(future.groupID.groupID),\n                    \"startUpTime\": str(future.startUpTime),\n                }\n                futureList_request.append(s)\n\n        return JsonResponse({\n            \"status\": 200,\n            \"message\": 'success',\n            \"data\": {\n                \"done\":doneList_request,\n                \"missed\":missedList_request,\n                \"open\":openList_request,\n                \"future\":futureList_request,\n            }\n        })\n\n\n\n@ajax_post_only\ndef checkcheck(request):\n    error=[]\n    user = models.user.objects.get_or_none(username=userSystem(request).getUserObject())\n    username=str(user.username)\n    groupid=request.POST.get('id')\n    group=models.group.objects.filter(groupID__exact=groupid).filter(member__contains=username)\n    g=None\n    for i in group:\n        g=i\n\n    if group.count()!=0:\n        check = models.check.objects.filter(groupID__exact=g.groupID)\n        flag = False\n        c = None\n        for ch in check:\n            if ch.enable is True:\n                flag = True\n                c = ch\n                break\n        if flag is False:\n            error.append(\"The group is not checking\")\n            return JsonResponse({\n                \"status\": 202,\n                \"message\": error\n            })\n        else:\n            m = c.results\n            if username in m:\n               error.append(\"您已经签到\")\n               return JsonResponse({\n                   \"status\": 202,\n                   \"message\": error\n               })\n            else:\n                m = m + \",\" + username\n                c.results = m\n                c.save()\n                return JsonResponse({\n                    \"status\": 200,\n                    \"message\": \"ok\"\n                })\n\n\n    else:\n        error.append(\"group is not exist or you are not the member of the group\")\n        return JsonResponse({\n            \"status\": 202,\n            \"message\": error\n        })\n\n#开启即时签到\n@ajax_post_only\ndef checkenable(request):\n    error=[]\n    user = models.user.objects.get_or_none(username=userSystem(request).getUsername())\n    if user is not None:\n        ownerID=user.username\n        groupid = request.POST.get('id')\n        group=models.group.objects.filter(groupID__exact=groupid).filter(owner__exact=ownerID)#查看该用户是否为该群组的所有者\n        if group.count()!=0:#是该群组的所有者\n            g=None\n            for i in group:\n                g=i\n\n            check=models.check.objects.filter(groupID__exact=g).filter(enable__exact=True)#查看该群组是否还在开启签到中，保证一个群组同一时间只能开启一次签到\n            if check.count()==0:#该群组没有处于签到中\n                models.check.checkObject(g)#创建新的签到对象\n                return JsonResponse({\n                    \"status\": 200,\n                    \"message\": 'ok'\n                })\n            else:#该群组上一次签到还没有结束\n                error.append(\"the group is checking\")\n                return JsonResponse({\n                    \"status\": 202,\n                    \"message\": error\n                })\n        else:#是该群组的所有者\n            error.append(\"you are not the owner of the group or the group not exists\")\n            return JsonResponse({\n                \"status\": 202,\n                \"message\": error\n            })\n    else:\n        error.append(\"user is not exist\")\n        return JsonResponse({\n            \"status\": 202,\n            \"message\": error\n        })\n\n#结束即时签到\ndef checkdisable(request):\n    error = []\n    user = models.user.objects.get_or_none(username=userSystem(request).getUsername())\n    ownerID = user.username\n    groupid = request.POST.get('id')\n    group = models.group.objects.filter(groupID__exact=groupid).filter(owner__exact=ownerID)\n    g=None\n    if group.count()!=0:\n        for i in group :\n            g=i\n        check=models.check.objects.filter(groupID__exact=g).filter(enable__exact=True)#找到该群组正在进行的签到，接着结束他\n        if check.count()!=0:\n            c=None\n            for i in check:\n                c=i\n            c.enable = False\n            c.save()\n            return JsonResponse({\n                \"status\": 200,\n                \"message\": \"ok\"\n            })\n        else:\n            error.append(\"该群组没有正在进行的签到\")\n            return JsonResponse({\n                \"status\": 202,\n                \"message\": error\n            })\n    else:\n        error.append(\"you are not the owner of the group or the group not exists\")\n        return JsonResponse({\n            \"status\": 202,\n            \"message\": error\n        })\n\n\n\n\n\ndef schedule(request):\n    error=[]\n    user = models.user.objects.get_or_none(username=userSystem(request).getUsername())\n    username=user.username#获取该用户的用户名称\n    groupid = request.POST.get('id')\n    print(groupid)\n    print(username)\n    group = models.group.objects.filter(groupID__exact=groupid).filter(Q(member__contains=username)  |  Q(owner__exact=username))#获取该群组，并且检查是否包含该用户\n    g=None\n    for i in group:\n        g=i\n    if group.count()!=0:\n        planlist=models.checkPlan.objects.filter(groupID__exact=g)\n        planlist_request=[]\n        for plan in planlist:\n            s={\n                \"scheduleId\":plan.planID,\n                \"startUpTime\":plan.startUpTime,\n                \"duration\":plan.duration,\n                \"enable\":plan.enable,\n                \"repeat\":plan.repeat,\n            }\n            planlist_request.append(s)\n        return JsonResponse({\n            \"status\": 200,\n            \"message\": \"ok\",\n            \"data\":planlist_request\n        })\n    else:\n        error.append(\"you are not the member of the group or the group is not exists\")\n        return JsonResponse({\n            \"status\": 202,\n            \"message\": error\n        })\n\n\n@ajax_post_only\ndef scheduleadd(request):\n    error=[]\n    user = models.user.objects.get_or_none(username=userSystem(request).getUsername())\n    username=user.username\n    groupid = request.POST.get('id')\n    group = models.group.objects.filter(groupID__exact=groupid).filter(owner__exact=username)\n    g=None\n    for i in group:\n        g=i\n    duration = request.POST.get('duration')\n    startUpTime = str(request.POST.get('startUpTime'))\n    repeat = request.POST.get('repeat')\n    duration = int(request.POST.get('duration'))\n    enable = str(request.POST.get('enable'))\n    if group.count()!=0:\n        if enable==\"false\":#计划关闭状态可以加入\n            a=models.checkPlan.checkPlanObejct(g,startUpTime,duration,repeat,False)\n            return JsonResponse({\n                \"status\": 200,\n                \"message\": 'ok',\n                \"data\":a.planID\n            })\n\n        else:#计划开启状态\n            #查找与之相冲突的计划\n            #先查找改组现在开启的计划\n            checkList = models.checkPlan.objects.filter(groupID__exact=g).filter(enable__exact=True)#这是本群开启的其他计划\n            flag = False#假设这些计划都不冲突\n            #如果这些计划冲突必须满足点：1.有相同的周天 2.当前计划的开启时间+持续时间>原有计划的开始时间 或者原有计划的开始时间+持续时间>当前计划的开始时间\n            weekday=repeat.split(\",\")\n            for w in weekday:\n                for che in checkList:\n                    if(w in che.repeat):#条件一\n                        #进行时间的计算\n                        #矛盾关系是  -当前持续时间<当前开始时间-以有开始时间<已有持续时间\n                        s1=\"20160916\"+startUpTime+\":00\"\n                        t1 = time.strptime(s1, '%Y%m%d%H:%M:%S')\n                        time1 = time.mktime(t1)\n                        s2=\"20160916\"+che.startUpTime+\":00\"\n                        t2 = time.strptime(s2, '%Y%m%d%H:%M:%S')\n                        time2 = time.mktime(t2)\n                        current_duration_second=duration*60*-1#负的当前计划持续的秒数\n                        check_duration_second=che.duration*60\n                        if(current_duration_second<=time1-time2<=check_duration_second):\n                            flag = True#表示由计划与当前计划矛盾\n                            break\n                if(flag==True):\n                    break\n            if(flag==True):\n                error.append(\"您当前为该群组设置的签到计划，与该群已有签到计划冲突\")\n                return JsonResponse({\n                    \"status\": 202,\n                    \"message\": error\n                })\n            else:#与计划没有冲突，查看与开启的签到有没有冲突\n                nowdate = datetime.date.today()\n                weekdate = str(nowdate.weekday() + 1)\n                if weekdate in repeat:\n                    check_thisday=models.check.objects.filter(enable__exact=True)\n                    if check_thisday.count()!=0:\n                        nowtime=str(time.strftime('%H:%M', time.localtime(time.time())))\n                        s1=\"20160916\"+nowtime+\":00\"\n                        t1 = time.strptime(s1, '%Y%m%d%H:%M:%S')\n                        ti1=time.mktime(t1)\n                        s2=\"20160916\"+startUpTime+\":00\"\n                        t2 = time.strptime(s2, '%Y%m%d%H:%M:%S')\n                        ti2=time.mktime(t2)\n                        if ti1>ti2 :\n                            a = models.checkPlan.checkPlanObejct(g, startUpTime, duration, repeat, True)\n                            return  JsonResponse({\n                                \"status\": 200,\n                                \"message\": \"ok\",\n                                \"data\": a.planID\n                            })\n                        else:\n                            error.append(\"您当前为该群组设置的签到计划,与该群当前开启的签到可能存在冲突\")\n                            return  JsonResponse({\n                                \"status\": 202,\n                                \"message\":error\n                            })\n                    else:\n                        a = models.checkPlan.checkPlanObejct(g, startUpTime, duration, repeat, True)\n                        return  JsonResponse({\n                            \"status\":200,\n                            \"message\":\"ok\",\n                            \"data\":a.planID\n                        })\n\n                else:\n                    a = models.checkPlan.checkPlanObejct(g, startUpTime, duration, repeat, True)\n                    return JsonResponse({\n                        \"status\":200,\n                        \"message\":\"ok\",\n                        \"data\":a.planID\n                    })\n\n\n\n\n    else:\n        error.append(\"you are not the owner of the group or the group is not exist\")\n        return JsonResponse({\n            \"status\": 202,\n            \"message\": error\n        })\n\n\n@ajax_post_only\ndef scheduleupdate(request):\n    error = []\n    user = models.user.objects.get_or_none(username=userSystem(request).getUsername())\n    username = user.username\n    scheduleId= request.POST.get('scheduleId')\n    check_plan = models.checkPlan.objects.get(planID=scheduleId)\n    groupId=request.POST.get('id',check_plan.groupID.groupID)\n    startUpTime = str(request.POST.get('startUpTime', check_plan.startUpTime))\n    duration = request.POST.get('duration', check_plan.duration)\n    repeat = request.POST.get('repeat', check_plan.repeat)\n    enable = str(request.POST.get('enable', check_plan.enable))\n    group = models.group.objects.filter(groupID__exact=groupId).filter(owner__exact=username)\n\n\n    g=None\n    for i in group:\n        g = i\n\n    if group.count()!=0 :\n        if (enable == (str(\n                check_plan.enable)).lower() and groupId == check_plan.groupID.groupID and startUpTime == check_plan.startUpTime\n                and duration == check_plan.duration and repeat == check_plan.repeat):\n            error.append(\"您未做任何修改\")\n            return JsonResponse({\n                \"status\": 202,\n                \"message\": error\n            })\n        if enable==\"false\":#计划修改为关闭状态可以修改\n            check_plan.groupID=g\n            check_plan.startUpTime=startUpTime\n            check_plan.duration=duration\n            check_plan.repeat=repeat\n            check_plan.enable=False\n            check_plan.save()\n            return JsonResponse({\n                \"status\": 200,\n                \"message\": 'ok',\n            })\n\n        else:#计划修改为开启状态\n            #查找与之相冲突的计划\n            #先查找改组现在开启的计划\n\n            checkList = models.checkPlan.objects.filter(groupID__exact=g).filter(enable__exact=True)#这是本群开启的其他计划\n            flag = False#假设这些计划都不冲突\n            #如果这些计划冲突必须满足点：1.有相同的周天 2.当前计划的开启时间+持续时间>原有计划的开始时间 或者原有计划的开始时间+持续时间>当前计划的开始时间\n            weekday=repeat.split(\",\")\n            for w in weekday:\n                for che in checkList:\n                    if(w in che.repeat):#条件一\n                        #进行时间的计算\n                        #矛盾关系是  -当前持续时间<当前开始时间-以有开始时间<已有持续时间\n                        s1=\"20160916\"+startUpTime+\":00\"\n                        t1 = time.strptime(s1, '%Y%m%d%H:%M:%S')\n                        time1 = time.mktime(t1)\n                        s2=\"20160916\"+che.startUpTime+\":00\"\n                        t2 = time.strptime(s2, '%Y%m%d%H:%M:%S')\n                        time2 = time.mktime(t2)\n                        current_duration_second=duration*60*-1#负的当前计划持续的秒数\n                        check_duration_second=che.duration*60\n                        if(current_duration_second<=time1-time2<=check_duration_second):\n                            flag = True#表示由计划与当前计划矛盾\n                            break\n                if(flag==True):\n                    break\n            if(flag==True):\n                error.append(\"您修改后的签到计划，与该群已有签到计划冲突\")\n                return JsonResponse({\n                    \"status\": 202,\n                    \"message\": error\n                })\n            else:#与计划没有冲突，查看与开启的签到有没有冲突\n\n                nowdate = datetime.date.today()\n                weekdate = str(nowdate.weekday() + 1)\n                if weekdate in repeat:\n                    check_thisday=models.check.objects.filter(enable__exact=True)\n                    if check_thisday.count()!=0:\n                        nowtime=str(time.strftime('%H:%M', time.localtime(time.time())))\n                        s1=\"20160916\"+nowtime+\":00\"\n                        t1 = time.strptime(s1, '%Y%m%d%H:%M:%S')\n                        ti1=time.mktime(t1)\n                        s2=\"20160916\"+startUpTime+\":00\"\n                        t2 = time.strptime(s2, '%Y%m%d%H:%M:%S')\n                        ti2=time.mktime(t2)\n                        if ti1>ti2 :\n                            check_plan.groupID=g\n                            check_plan.startUpTime=startUpTime\n                            check_plan.duration=duration\n                            check_plan.repeat=repeat\n                            check_plan.enable=True\n                            check_plan.save()\n                            return  JsonResponse({\n                                \"status\": 200,\n                                \"message\": \"ok\",\n                            })\n                        else:\n\n                            error.append(\"您修改后的签到计划,与该群当前开启的签到可能存在冲突\")\n                            return  JsonResponse({\n                                \"status\": 202,\n                                \"message\":error\n                            })\n\n\n\n                    else:\n\n                        check_plan.groupID=g\n                        check_plan.startUpTime=startUpTime\n                        check_plan.duration=duration\n                        check_plan.enable=True\n                        check_plan.repeat=repeat\n                        check_plan.save()\n                        return  JsonResponse({\n                            \"status\":200,\n                            \"message\":\"OK\",\n                        })\n\n                else:\n                    check_plan.groupID= g\n                    check_plan.startUpTime=startUpTime\n                    check_plan.duration=duration\n                    check_plan.enable=True\n                    check_plan.repeat=repeat\n                    check_plan.save()\n                    return JsonResponse({\n                        \"status\":200,\n                        \"message\":\"ok\",\n                    })\n\n    else:\n        error.append(\"you are not the owner of the group or the group is not exist\")\n        return JsonResponse({\n            \"status\": 202,\n            \"message\": error\n        })\n\n\n\n\n\ndef scheduledelete(request):\n    user = models.user.objects.get_or_none(username=userSystem(request).getUsername())\n    username=user.username\n    error=[]\n    scheduleId = request.POST.get('scheduleId')\n    check_plan = models.checkPlan.objects.filter(planID__exact=scheduleId)\n    c=None\n    for i in check_plan:\n        c = i\n    groupID=c.groupID.groupID\n    group=models.group.objects.filter(groupID__exact=groupID).filter(owner__exact=username)\n    if group.count()!=0:\n        if check_plan.count()!=0:\n            check_plan.delete()\n            return JsonResponse({\n                \"status\":200,\n                \"message\":\"ok\"\n            })\n        else:\n            error.append(\"该签到计划不存在\")\n            return JsonResponse({\n                \"status\":202,\n                \"message\":error\n            })\n    else:\n        error.append(\"You are not the owner of the group or the group is not exist\")\n        return JsonResponse({\n            \"status\": 202,\n            \"message\": error\n        })
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- weCheck/views.py	(revision 0969f5b4f095b46f76652a63daefb116ab33a17a)
+++ weCheck/views.py	(date 1534990826465)
@@ -719,7 +719,7 @@
     error=[]
     user = models.user.objects.get_or_none(username=userSystem(request).getUsername())
     username=user.username#获取该用户的用户名称
-    groupid = request.POST.get('id')
+    groupid = request.GET.get('id')
     print(groupid)
     print(username)
     group = models.group.objects.filter(groupID__exact=groupid).filter(Q(member__contains=username)  |  Q(owner__exact=username))#获取该群组，并且检查是否包含该用户
